parameters:
  - name: appName
    type: string
    default: ''  # Default app name
  - name: azureConnection
    type: string
    default: ''  # Default Azure connection
  - name: appConfigName
    type: string
    default: ''  # Default App Configuration name
  - name: updateVersion
    type: string
    default: '1.0.1'  # Default updateVersion

steps:
# Step 1: Initialize the environment and load variables
- task: AzureAppConfiguration@8
  inputs:
    azureSubscription: '${{ parameters.azureConnection }}' # Name of the service connection
    configstoreName: '' # Name of the App Configuration
    AppConfigurationEndpoint: 'https://${{ parameters.appConfigName }}.azconfig.io'
    keyFilter: 'global:shared:*'
    labelFilter: ''
    TrimKeyPrefix: 'global:shared:'
    selectKeys: true
  displayName: '[init] Fetch variables from App Configuration'

# Step 2: Versioning Task
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Parameters
      $connectionString = "$(SAConnectionString)"
      $tableName = "VersioningTable"
      $appName = "${{ parameters.appName }}"
      $branchName = "$(Build.SourceBranchName)"
      $version = "${{ parameters.updateVersion }}"  # Use updateVersion directly from parameters
      $major, $minor, $patch = $version -split '\.'

      Write-Host "Version received: $version"
      Write-Host "Pipeline Version: $version"
      Write-Host "major, minor, patch: $major, $minor, $patch"

      # Modify the RowKey to include the version
      $rowKey = "$branchName-$version"

      # Query the table to check if an entry already exists for appName, RowKey (branchName + version)
      try {
          $existingEntry = az storage entity query `
              --connection-string $connectionString `
              --table-name $tableName `
              --filter "PartitionKey eq '$appName' and RowKey eq '$rowKey'" `
              -o json | ConvertFrom-Json
      } catch {
          if ($_.Exception.Message -match "ResourceNotFound") {
              Write-Host "Entity not found. Creating a new entry..."
              $existingEntry = $null
          } else {
              Write-Error "Error querying the table '$tableName': $_"
              exit 1
          }
      }

      # Check if the entry already exists
      $entryFound = $false
      if ($existingEntry -ne $null -and $existingEntry.items.Count -gt 0) {
          foreach ($entry in $existingEntry.items) {
              if ($entry.version -eq $version) {
                  $entryFound = $true
                  # Increment the revision
                  if ($entry.revision -ne $null -and $entry.revision -ne '') {
                      $revision = [int]$entry.revision + 1
                  } else {
                      Write-Host "Property 'revision' not found or is empty. Setting to 1."
                      $revision = 1
                  }

                  Write-Host "Updating the entity with revision: $revision"
                  az storage entity merge `
                      --connection-string $connectionString `
                      --table-name $tableName `
                      --entity PartitionKey=$appName RowKey=$rowKey version=$version revision=$revision
                  break
              }
          }
      }

      if (-not $entryFound) {
          # Create a new entry with revision 1
          Write-Host "Creating a new entity in the table '$tableName'..."
          try {
              az storage entity insert `
                  --connection-string $connectionString `
                  --table-name $tableName `
                  --entity PartitionKey=$appName RowKey=$rowKey version=$version revision=1
              $revision = 1
          } catch {
              if ($_.Exception.Message -match "already exists") {
                  Write-Host "The entity already exists. Ignoring creation."
              } else {
                  Write-Error "Error creating the entity in the table '$tableName': $_"
                  exit 1
              }
          }
      }

      # Build the version string based on the branch
      if ($branchName -ieq "main") {
          $fullVersion = "$major.$minor.$patch.$revision"
      } else {
          $fullVersion = "$major.$minor.$patch-alpha$revision"
      }

      # Update the build name
      Write-Host "##vso[build.updatebuildnumber]$fullVersion"

      # Display the generated version
      Write-Host "Generated Version: $fullVersion"
  displayName: '[versioning] Generate and Update Build Version'